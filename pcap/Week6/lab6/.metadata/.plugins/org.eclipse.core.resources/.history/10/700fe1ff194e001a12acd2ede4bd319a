#include <stdio.h>
#include <stdlib.h>
#include <CL/cl.h>

#include <time.h>
#include <string.h>

#define MAX_SOURCE_SIZE (0x100000)

int main(void)
{
	// **
	time_t start, end;
	start = clock();

	char tempstr[20];

	int i;
	printf("Enter string: ");
	scanf("%s", tempstr);
	// fgets(tempstr);
	// tempstr[20] = '\0';

	int len = strlen(tempstr);
	len++;

	char *str = (char*)malloc(sizeof(char*) * len);
	strcpy(str, tempstr);
	// **

	FILE *fp;
	char *source_str;
	size_t source_size;

	fp = fopen("q1.cl", "r");
	if(!fp)
	{
		fprintf(stderr, "Failed to load kernel.\n");
		getchar();
		exit(1);
	}
	source_str = (char*)malloc(MAX_SOURCE_SIZE);
	source_size = fread(source_str, 1, MAX_SOURCE_SIZE, fp);

	fclose(fp);

	// 1 - Get platform & device information
	cl_platform_id platform_id = NULL;
	cl_device_id device_id = NULL;
	cl_uint ret_num_devices;
	cl_uint ret_num_platforms;

	cl_int ret = clGetPlatformIDs(1, &platform_id, &ret_num_platforms);
	ret = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_CPU, 1, &device_id, &ret_num_devices);

	// 2 - Create an OpenCL context
	cl_context context = clCreateContext(NULL, 1, &device_id, NULL, NULL, &ret);

	// 3 - Create a command queue
	// *
	cl_command_queue command_queue = clCreateCommandQueue(context, device_id, CL_QUEUE_PROFILING_ENABLE, &ret);

	// 4 - Create memory buffers on the device for input & output string
	// *
	cl_mem s_mem_obj = clCreateBuffer(context, CL_MEM_READ_ONLY, len * sizeof(char), NULL, &ret);
	cl_mem t_mem_obj = clCreateBuffer(context, CL_MEM_READ_ONLY, len * sizeof(char), NULL, &ret);

	// 5 - Copy input string into respective memory buffers
	// *
	ret = clEnqueueWriteBuffer(command_queue, s_mem_obj, CL_TRUE, 0, len * sizeof(char), str, 0, NULL, NULL);

	// 6 - Create a program from the kernel source
	cl_program program = clCreateProgramWithSource(context, 1, (const char**)&source_str, (const size_t *)&source_size, &ret);

	// 7 - Build the program
	ret = clBuildProgram(program, 1, &device_id, NULL, NULL, NULL);

	// 8 - Create the OpenCL kernel object
	cl_kernel kernel = clCreateKernel(program, "str_chgcase", &ret);

	// 9 - Set the arguments of the kernel
	// *
	ret = clSetKernelArg(kernel, 0, sizeof(cl_mem), (void *)&s_mem_obj);
	ret = clSetKernelArg(kernel, 1, sizeof(cl_mem), (void *)&t_mem_obj);

	// 10 - Set the global work size as string length
	// *
	size_t global_item_size = len;
	size_t local_item_size = 1;

	// 11 - Execute kernel for entire string in parallel
	cl_event event;
	ret = clEnqueueNDRangeKernel(command_queue, kernel, 1, NULL, &global_item_size, &local_item_size, 0, NULL, &event);

	// *
	// time_t stime = clock();

	// Kernel execution must be finished before calculating time
	ret = clFinish(command_queue);

	// **
	cl_ulong time_start, time_end;
	double total_time;

	// Find kernel execution start time
	clGetEventProfilingInfo(event, CL_PROFILING_COMMAND_START, sizeof(time_start), &time_start, NULL);
	// Find kernel execution end time
	clGetEventProfilingInfo(event, CL_PROFILING_COMMAND_END, sizeof(time_end), &time_end, NULL);

	total_time = (double)(time_end - time_start);
	// **

	// 12 - Read the results in memory buffer on the device
	// *
	char *strres = (char *)malloc(sizeof(char) * len);
	ret = clEnqueueReadBuffer(command_queue, t_mem_obj, CL_TRUE, 0, len * sizeof(char), strres, 0, NULL, NULL);

	// **
	printf("\nDone");
	strres[len - 1] = '\0';
	printf("\nResultant toggled string: %s", strres);
	getchar();
	// **

	// 13 - Clean up
	ret = clFlush(command_queue);
	ret = clReleaseKernel(kernel);
	ret = clReleaseProgram(program);

	ret = clReleaseMemObject(s_mem_obj);
	ret = clReleaseMemObject(t_mem_obj);

	ret = clReleaseCommandQueue(command_queue);
	ret = clReleaseContext(context);

	// **
	end = clock();
	printf("\n\nTime taken to execute the whole program: %0.3f seconds\n", (end - start) / (double)CLOCKS_PER_SEC);

	free(str);
	free(strres);
	// **

	getchar();
	return 0;
}
